{"version":3,"file":"typo-text.js","sourceRoot":"","sources":["src/typo-text.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, css, html } from 'lit'\r\nimport { customElement, property, query } from 'lit/decorators.js'\r\n\r\n@customElement('typo-text')\r\nexport class TypoText extends LitElement {\r\n  static override styles = css`\r\n    :host {\r\n      display: block;\r\n      font-family: Verdana;\r\n      text-align: var(--text-align, left);\r\n      font-size: var(--base-font-size, 12px);\r\n      text-rendering: geometricPrecision;\r\n\r\n      --column-count: 1;\r\n      --column-width: 400px;\r\n      --column-gap: calc(var(--base-font-size) * 2.75);\r\n      --base-line-height: calc(var(--base-font-size) * 1.2);\r\n    }\r\n\r\n    article {\r\n      width: 100%;\r\n      margin: 0 auto;\r\n      column-count: var(--column-count);\r\n      column-width: var(--column-width);\r\n      column-gap: var(--column-gap);\r\n      line-height: var(--base-line-height);\r\n    }\r\n\r\n    ::slotted(*) {\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n\r\n    ::slotted(p) {\r\n      font-size: 1em;\r\n      hyphens: auto;\r\n      text-wrap: pretty;\r\n    }\r\n  `\r\n\r\n  @property({ type: String, attribute: 'font-size' })\r\n  fontSize = '12px'\r\n\r\n  @property({ type: String, attribute: 'text-align' })\r\n  textAlign = 'left'\r\n\r\n  @property({ type: String, attribute: 'line-height' })\r\n  lineHeight = ''\r\n\r\n  @property({ type: String, attribute: 'column-width' })\r\n  columnWidth = '400px'\r\n\r\n  @property({ type: String, attribute: 'column-count' })\r\n  columnCount = '1'\r\n\r\n  @property({ type: String, attribute: 'column-gap' })\r\n  columnGap = ''\r\n\r\n  @property({ type: String, attribute: 'chars-per-line' })\r\n  charsPerLine = ''\r\n\r\n  @query('article') private articleEl!: HTMLElement\r\n\r\n  private fontMetrics: Record<string, number> = {}\r\n  private baseTopOffset = 0\r\n  private baseBottomOffset = 0\r\n\r\n  private resizeObserver: ResizeObserver | null = null\r\n  private breakpoints: number[] = []\r\n\r\n  override updated(changedProps: Map<string, unknown>) {\r\n    if (changedProps.has('fontSize')) {\r\n      this.style.setProperty('--base-font-size', this._checkIsUnitSet(this.fontSize))\r\n      if (!this.lineHeight) this.lineHeight = `${parseFloat(this.fontSize) * 1.6}px`\r\n    }\r\n\r\n    if (changedProps.has('textAlign')) {\r\n      this.style.setProperty('--text-align', this.textAlign)\r\n    }\r\n\r\n    if (changedProps.has('lineHeight')) {\r\n      this.style.setProperty('--base-line-height', this._checkIsUnitSet(this.lineHeight))\r\n    }\r\n\r\n    if (changedProps.has('columnWidth')) {\r\n      this.style.setProperty('--column-width', this._checkIsUnitSet(this.columnWidth))\r\n    }\r\n\r\n    if (changedProps.has('columnCount')) {\r\n      this.style.setProperty('--column-count', this.columnCount)\r\n    }\r\n\r\n    if (changedProps.has('columnGap')) {\r\n      this.style.setProperty('--column-gap', this._checkIsUnitSet(this.columnGap))\r\n      if (!this.columnGap) this.columnGap = `${parseFloat(this.columnWidth) * 0.0825}px`\r\n    }\r\n  }\r\n\r\n  override render() {\r\n    return html`\r\n      <article>\r\n        <slot></slot>\r\n      </article>\r\n    `\r\n  }\r\n\r\n  private _checkIsUnitSet(value: string, unit = 'px'): string {\r\n    return /^\\d+$/.test(value) ? `${value}${unit}` : value\r\n  }\r\n\r\n  override async firstUpdated() {\r\n    const paragraphs = this.querySelectorAll('p')\r\n    paragraphs.forEach((p) => {\r\n      p.textContent = this._noBreakPrepositions(this._rusHyphenate(p.textContent ?? ''))\r\n      p.style.marginBottom = this.lineHeight\r\n    })\r\n\r\n    requestAnimationFrame(async () => {\r\n      this.fontMetrics = this._getFontMetrics(\r\n        getComputedStyle(this).fontFamily,\r\n        getComputedStyle(this).fontWeight,\r\n        200,\r\n        'baseline'\r\n      )\r\n\r\n      console.log(this.fontMetrics)\r\n\r\n      this.baseTopOffset =\r\n        parseFloat(this.lineHeight) -\r\n        (parseFloat(this.lineHeight) - parseFloat(this.fontSize) * 1.2) / 2 -\r\n        (this.fontMetrics.descent - this.fontMetrics.xHeight) * parseFloat(this.fontSize)\r\n      this.baseBottomOffset =\r\n        this.fontMetrics.descent * parseFloat(this.fontSize) +\r\n        (parseFloat(this.lineHeight) - parseFloat(this.fontSize) * 1.2) / 2\r\n\r\n      paragraphs.forEach((p) => {\r\n        p.style.marginBottom = this.lineHeight\r\n      })\r\n\r\n      const heading = this.querySelector('h1')\r\n      if (heading) {\r\n        this._prepareHeading(heading)\r\n      }\r\n\r\n      this._wrapImages()\r\n\r\n      if (this.charsPerLine && paragraphs.length > 0) {\r\n        const optimalWidth = await this._getOptimalLineWidth(\r\n          paragraphs[0],\r\n          parseInt(this.charsPerLine)\r\n        )\r\n        this.columnWidth = `${optimalWidth}`\r\n        this.style.setProperty('--column-width', `${optimalWidth}px`)\r\n      }\r\n\r\n      this._initResizeObserver()\r\n    })\r\n  }\r\n\r\n  // https://github.com/soulwire/FontMetrics\r\n  private _getFontMetrics(\r\n    fontFamily = 'Verdana',\r\n    fontWeight = 'normal',\r\n    fontSize = 12,\r\n    origin = 'baseline'\r\n  ) {\r\n    const basicChars = {\r\n      capHeight: 'С',\r\n      baseline: 'н',\r\n      xHeight: 'х',\r\n      descent: 'р',\r\n      ascent: 'б',\r\n      tittle: 'й'\r\n    }\r\n\r\n    const canvas = document.createElement('canvas')\r\n    const context = canvas.getContext('2d', { willReadFrequently: true })!\r\n    const padding = fontSize * 0.5\r\n\r\n    canvas.width = fontSize * 2\r\n    canvas.height = fontSize * 2 + padding\r\n    context.font = `${fontWeight} ${fontSize}px ${fontFamily}`\r\n    context.textBaseline = 'top'\r\n    context.textAlign = 'center'\r\n\r\n    const setAlignment = (baseline: CanvasTextBaseline = 'top') => {\r\n      const ty = baseline === 'bottom' ? canvas.height : 0\r\n      context.setTransform(1, 0, 0, 1, 0, ty)\r\n      context.textBaseline = baseline\r\n    }\r\n\r\n    const updateText = (text: string) => {\r\n      context.clearRect(0, 0, canvas.width, canvas.height)\r\n      context.fillText(text, canvas.width / 2, padding, canvas.width)\r\n    }\r\n\r\n    const computeLineHeight = () => {\r\n      const letter = 'A'\r\n      setAlignment('bottom')\r\n      const gutter = canvas.height - measureBottom(letter)\r\n      setAlignment('top')\r\n      return measureBottom(letter) + gutter\r\n    }\r\n\r\n    const getPixels = (text: string) => {\r\n      updateText(text)\r\n      return context.getImageData(0, 0, canvas.width, canvas.height).data\r\n    }\r\n\r\n    const getFirstIndex = (pixels: Uint8ClampedArray) => {\r\n      for (let i = 3, n = pixels.length; i < n; i += 4) {\r\n        if (pixels[i] > 0) return (i - 3) / 4\r\n      }\r\n      return pixels.length\r\n    }\r\n\r\n    const getLastIndex = (pixels: Uint8ClampedArray) => {\r\n      for (let i = pixels.length - 1; i >= 3; i -= 4) {\r\n        if (pixels[i] > 0) return i / 4\r\n      }\r\n      return 0\r\n    }\r\n\r\n    const normalize = (metrics: Record<string, number>, fontSize: number, origin: string) => {\r\n      const result: Record<string, number> = {}\r\n      const offset = metrics[origin]\r\n      for (const key in metrics) {\r\n        result[key] = (metrics[key] - offset) / fontSize\r\n      }\r\n      return result\r\n    }\r\n\r\n    const measureTop = (text: string) =>\r\n      Math.round(getFirstIndex(getPixels(text)) / canvas.width) - padding\r\n    const measureBottom = (text: string) =>\r\n      Math.round(getLastIndex(getPixels(text)) / canvas.width) - padding\r\n\r\n    const getMetrics = (chars = basicChars) => ({\r\n      capHeight: measureTop(chars.capHeight),\r\n      baseline: measureBottom(chars.baseline),\r\n      xHeight: measureTop(chars.xHeight),\r\n      descent: measureBottom(chars.descent),\r\n      bottom: computeLineHeight(),\r\n      ascent: measureTop(chars.ascent),\r\n      tittle: measureTop(chars.tittle),\r\n      top: 0\r\n    })\r\n\r\n    return normalize(getMetrics(), fontSize, origin)\r\n  }\r\n\r\n  private async _initResizeObserver() {\r\n    await new Promise((resolve) => requestAnimationFrame(() => resolve(null)))\r\n\r\n    const columnCount = parseInt(this.columnCount)\r\n    const columnWidth = parseFloat(getComputedStyle(this).getPropertyValue('--column-width'))\r\n    const columnGap = parseFloat(getComputedStyle(this).getPropertyValue('--column-gap'))\r\n\r\n    this.breakpoints = []\r\n    for (let i = 1; i <= columnCount; i++) {\r\n      this.breakpoints.push(columnWidth * i + columnGap * (i - 1))\r\n    }\r\n    this.breakpoints.reverse()\r\n\r\n    this.resizeObserver = new ResizeObserver((entries) => {\r\n      for (const entry of entries) {\r\n        const width = entry.contentRect.width\r\n        const currentIndex = this.breakpoints.findIndex((bp) => bp <= width)\r\n        const maxWidth = this.breakpoints.at(currentIndex) ?? this.breakpoints.at(-1)\r\n        if (this.articleEl.style.maxWidth !== `${maxWidth}px`) {\r\n          this.articleEl.style.maxWidth = `${maxWidth}px`\r\n        }\r\n      }\r\n    })\r\n\r\n    this.resizeObserver.observe(this)\r\n  }\r\n\r\n  private _rusHyphenate(text: string): string {\r\n    const all = '[абвгдеёжзийклмнопрстуфхцчшщъыьэюя]'\r\n    const vowel = '[аеёиоуыэюя]'\r\n    const consonant = '[бвгджзклмнпрстфхцчшщ]'\r\n    const zn = '[йъь]'\r\n    const shy = '\\u00AD'\r\n\r\n    const hyp: RegExp[] = [\r\n      new RegExp(`(${zn})(${all}${all})`, 'ig'),\r\n      new RegExp(`(${vowel})(${vowel}${all})`, 'ig'),\r\n      new RegExp(`(${vowel}${consonant})(${consonant}${vowel})`, 'ig'),\r\n      new RegExp(`(${consonant}${vowel})(${consonant}${vowel})`, 'ig'),\r\n      new RegExp(`(${vowel}${consonant})(${consonant}${consonant}${vowel})`, 'ig'),\r\n      new RegExp(`(${vowel}${consonant}${consonant})(${consonant}${consonant}${vowel})`, 'ig')\r\n    ]\r\n\r\n    let result = text\r\n    for (const rule of hyp) {\r\n      while (rule.test(result)) {\r\n        result = result.replaceAll(rule, `$1${shy}$2`)\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  private _noBreakPrepositions(text: string): string {\r\n    const nbsp = '\\u00A0'\r\n    return text.replace(\r\n      /(\\s)(о|в|во|с|к|но|он|из|на|со|и|для|у|как|а|или|без)(\\s)([(\"«А-яЁёЙй])/gimu,\r\n      `$1$2${nbsp}$4`\r\n    )\r\n  }\r\n\r\n  private async _getOptimalLineWidth(paragraph: Element, charsPerLine: number): Promise<number> {\r\n    await new Promise((resolve) => requestAnimationFrame(() => resolve(null)))\r\n\r\n    const p = paragraph.cloneNode() as HTMLElement\r\n    p.textContent = ''\r\n    p.style.whiteSpace = 'nowrap'\r\n    p.style.width = 'fit-content'\r\n    p.style.position = 'absolute'\r\n    p.style.visibility = 'hidden'\r\n    this.appendChild(p)\r\n\r\n    const text = paragraph.textContent?.replace(/\\u00AD/g, '') ?? ''\r\n    p.textContent = text.slice(0, charsPerLine).padEnd(charsPerLine, 'а')\r\n    const width = p.offsetWidth\r\n    this.removeChild(p)\r\n\r\n    return width\r\n  }\r\n\r\n  private _wrapImages() {\r\n    const images = this.querySelectorAll('img')\r\n    const lineHeight = parseFloat(this.lineHeight)\r\n\r\n    images.forEach((img) => {\r\n      if (img.closest('figure')) return\r\n\r\n      const float = img.getAttribute('image-float')\r\n      const caption = img.getAttribute('image-caption')\r\n      // const span = img.getAttribute('image-span')\r\n\r\n      const figure = document.createElement('figure')\r\n      img.replaceWith(figure)\r\n      figure.appendChild(img)\r\n\r\n      // Set object-fit and object-position\r\n      img.style.width = '100%'\r\n      img.style.display = 'block'\r\n      img.style.objectFit = img.getAttribute('object-fit') || 'cover'\r\n      img.style.objectPosition = img.getAttribute('object-position') || 'center'\r\n\r\n      if (!float) {\r\n        img.style.display = 'block'\r\n        img.style.marginLeft = 'auto'\r\n        img.style.marginRight = 'auto'\r\n      }\r\n\r\n      // Adjust height to align with line-height multiple\r\n      if (img.complete) {\r\n        this._adjustImageHeight(img, lineHeight)\r\n      } else {\r\n        img.addEventListener('load', () => this._adjustImageHeight(img, lineHeight))\r\n      }\r\n\r\n      if (caption) {\r\n        const figcaption = document.createElement('figcaption')\r\n        figcaption.textContent = caption\r\n        figcaption.style.textAlign = 'center'\r\n        figcaption.style.fontFamily = getComputedStyle(this).fontFamily\r\n        figcaption.style.fontSize = `${Math.round(parseFloat(this.fontSize) * 0.85)}px`\r\n        figcaption.style.lineHeight = this.lineHeight\r\n        figcaption.style.marginTop = `${this.baseBottomOffset}px`\r\n        figure.appendChild(figcaption)\r\n      }\r\n\r\n      // if (span === 'all') {\r\n      //   figure.style.breakInside = 'avoid'\r\n      //   figure.style.columnSpan = 'all'\r\n      // }\r\n\r\n      figure.style.paddingTop = `${this.baseTopOffset}px`\r\n      figure.style.marginBottom = this.lineHeight\r\n\r\n      if (!float) {\r\n        if (\r\n          this.getBoundingClientRect().top == figure.getBoundingClientRect().top ||\r\n          figure.previousElementSibling?.tagName == 'H1'\r\n        ) {\r\n          figure.style.marginTop = `0px`\r\n        } else {\r\n          figure.style.marginTop = this.lineHeight\r\n        }\r\n\r\n        this._removeSpaceBetweenImageAndParagraph(\r\n          figure,\r\n          figure.previousElementSibling as HTMLElement\r\n        )\r\n      } else if (float === 'left') {\r\n        figure.style.marginRight = this.lineHeight\r\n      } else if (float === 'right') {\r\n        figure.style.marginLeft = this.lineHeight\r\n      }\r\n\r\n      if (float === 'left' || float === 'right') {\r\n        figure.style.cssFloat = float\r\n        figure.style.maxWidth = '30%'\r\n      } else {\r\n        figure.style.maxWidth = '100%'\r\n      }\r\n    })\r\n  }\r\n\r\n  private _adjustImageHeight(img: HTMLImageElement, lineHeight: number) {\r\n    requestAnimationFrame(() => {\r\n      let adjustedHeight = 0\r\n      if (img.getAttribute('image-float') || !img.getAttribute('height')) {\r\n        const width = img.offsetWidth\r\n        if (width === 0 || !img.isConnected) return\r\n        const ratio = img.naturalHeight / img.naturalWidth\r\n        const rawHeight = ratio * width\r\n        const lines = Math.round(\r\n          (img.getAttribute('object-fit') === 'contain'\r\n            ? rawHeight\r\n            : img.height < rawHeight\r\n            ? img.height\r\n            : rawHeight) / lineHeight\r\n        )\r\n        adjustedHeight = lines * lineHeight\r\n      } else {\r\n        const lines = Math.round(img.height / lineHeight)\r\n        adjustedHeight = lines * lineHeight\r\n      }\r\n      img.style.height = `${adjustedHeight - this.baseTopOffset - this.baseBottomOffset}px`\r\n    })\r\n  }\r\n\r\n  _removeSpaceBetweenImageAndParagraph(figure: HTMLElement, previousParagraph: HTMLElement | null) {\r\n    if (previousParagraph && this.getBoundingClientRect().y != figure.getBoundingClientRect().y) {\r\n      previousParagraph.style.marginBottom = '0px'\r\n    }\r\n  }\r\n\r\n  private _prepareHeading(heading: HTMLElement) {\r\n    heading.textContent = this._noBreakPrepositions(this._rusHyphenate(heading.textContent ?? ''))\r\n    heading.style.hyphens = 'none'\r\n\r\n    const align = heading.getAttribute('heading-align')\r\n    const size = heading.getAttribute('heading-size')\r\n    const span = heading.getAttribute('heading-span')\r\n    const fontSize = parseFloat(this.fontSize)\r\n    const lineHeight = parseFloat(this.lineHeight)\r\n    let verticalShift = this.fontMetrics.descent * lineHeight\r\n\r\n    if (align === 'center') {\r\n      heading.style.textAlign = 'center'\r\n    } else {\r\n      heading.style.textAlign = 'left'\r\n    }\r\n\r\n    switch (size) {\r\n      case 'sm':\r\n        heading.style.fontSize = `${fontSize}px`\r\n        heading.style.lineHeight = `${lineHeight}px`\r\n        verticalShift = verticalShift > 5 ? verticalShift - 5 : 0\r\n        break\r\n      case 'md':\r\n        heading.style.fontSize = `${fontSize * 2}px`\r\n        heading.style.lineHeight = `${lineHeight * 2}px`\r\n        verticalShift += 2\r\n        break\r\n      case 'lg':\r\n        heading.style.fontSize = `${fontSize * 3}px`\r\n        heading.style.lineHeight = `${lineHeight * 3}px`\r\n        heading.style.marginTop = `-${lineHeight}px`\r\n        verticalShift += 9\r\n        break\r\n    }\r\n\r\n    if (span === 'all') {\r\n      heading.style.columnSpan = 'all'\r\n    }\r\n\r\n    heading.style.paddingTop = `${verticalShift}px`\r\n    heading.style.paddingBottom = `${parseFloat(this.lineHeight) - verticalShift}px`\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'typo-text': TypoText\r\n  }\r\n}\r\n"]}